#
#  meson.ctags --- multitable regex parser for meson.build files
#
#  Copyright (c) 2020 Masatake YAMATO
#  Copyright (c) 2020 Red Hat, Inc.
#
#  This source code is released for free distribution under the terms of the
#  GNU General Public License version 2 or (at your option) any later version.
#
# References:
#
# - https://mesonbuild.com/Syntax.html
#

--langdef=Meson{version=1.1}
--map-Meson=+(meson.build)

#
# Kind definitions
#
--kinddef-Meson=P,project,projects
--kinddef-Meson=V,variable,variables
--kinddef-Meson=S,subdir,subdirs
--kinddef-Meson=B,build,build targets
--kinddef-Meson=c,custom,custom targets
--kinddef-Meson=t,test,tests
--kinddef-Meson=b,benchmark,benchmark targets
--kinddef-Meson=r,run,run targets
--kinddef-Meson=m,module,modules
--kinddef-Meson=D,cfgdata,configuration data objects
--kinddef-Meson=C,cfgvar,configuration variables

#
# Role definitions
#
--_roledef-Meson.{module}=imported,imported

#
# Tables declaration
#
--_tabledef-Meson=main
--_tabledef-Meson=mline_string
--_tabledef-Meson=string
--_tabledef-Meson=comment
--_tabledef-Meson=skipPair
--_tabledef-Meson=common
--_tabledef-Meson=skipToArgEnd
--_tabledef-Meson=configBody
--_tabledef-Meson=configElt
--_tabledef-Meson=configValue

--_prelude-Meson={{
    /lastvar false def
    /cfgdict 5 dict def
}}

#
# Tables definitions
#
--_mtable-regex-Meson=comment/[^\n]+//
--_mtable-regex-Meson=comment/\n//{tleave}

--_mtable-regex-Meson=string/[^\\']+//
--_mtable-regex-Meson=string/\\.//
--_mtable-regex-Meson=string/'//{tleave}
--_mtable-regex-Meson=string/.//

--_mtable-regex-Meson=mline_string/'''//{tleave}
--_mtable-regex-Meson=mline_string/[^']+//
--_mtable-regex-Meson=mline_string/.//

--_mtable-regex-Meson=common/[ \t\n]+//
--_mtable-regex-Meson=common/#//{tenter=comment}
--_mtable-regex-Meson=common/'''//{tenter=mline_string}
--_mtable-regex-Meson=common/'//{tenter=string}
--_mtable-regex-Meson=common/[[({]//{tenter=skipPair}
--_mtable-regex-Meson=common/([a-zA-Z_][a-zA-Z0-9_]*)\.(set(_quoted|10)?)[ \t\n]*\('([^']*[^\\])'[ \t\n]*//{{
   cfgdict \1 known {
      \4 /cfgvar @4 _tag _commit
      cfgdict \1 get scope:
   } if
}}

#
# Skip an unintersting token for optimization
# ./ctags -o -  /home/yamato/backup/var/util-linux/util-linux-2.41.devel-232-07aac-dirty/meson.build > /dev/null 2> /tmp/logf  0.46s user 0.01s system 97% cpu 0.483 total
# => ./ctags -o -  /home/yamato/backup/var/util-linux/util-linux-2.41.devel-232-07aac-dirty/meson.build > /dev/null 2> /tmp/logf  0.19s user 0.01s system 97% cpu 0.209 total
#
--_mtable-regex-Meson=common/[df-hkm-qt-z][a-zA-Z0-9_]*//

--_mtable-regex-Meson=common/(jar|executable|shared_module|(both_|shared_|static_)?library)[ \t\n]*\([ \t\n]*'([^']*[^\\])'[ \t\n]*/\3/B/{tenter=skipToArgEnd}
--_mtable-regex-Meson=common/custom_target[ \t\n]*\([ \t\n]*'([^']*[^\\])'[ \t\n]*/\1/c/{tenter=skipToArgEnd}
--_mtable-regex-Meson=common/(alias|run)_target[ \t\n]*\([ \t\n]*'([^']*[^\\])'[ \t\n]*/\2/r/{tenter=skipToArgEnd}
--_mtable-regex-Meson=common/benchmark[ \t\n]*\([ \t\n]*'([^']*[^\\])'[ \t\n]*/\1/b/{tenter=skipToArgEnd}
--_mtable-regex-Meson=common/import[ \t\n]*\([ \t\n]*'([^']*[^\\])'[ \t\n]*/\1/m/{tenter=skipToArgEnd}{_role=imported}

--_mtable-regex-Meson=common/(configuration_data)[ \t\n]*\([ \t\n]*//{tenter=configBody}{{
   lastvar false ne {
      lastvar :name
      /cfgdata
      lastvar _tagloc
      _tag _commit

      % Keep the newly created /cfgdata tag on the stack
      % till leaving /configBody table.
      dup

      cfgdict lastvar :name 3 -1 roll put

      % Don't emit the tag for the original variable.
      lastvar _markplaceholder
      /lastvar false def
   } {
      % Looks broken input. There is no left side for the configuration_data(...).
      % Push a dummy tag.
      (cfg) /cfgdata _anongen /cfgdata @1 _tag _commit
      dup /anonymous _markextra
   } ifelse
   % The configElt table refers to the cork index pushed by this table
   % for filling the scope of cfgvar/C tags.
}}

--_mtable-regex-Meson=skipPair/[])}]//{tleave}
--_mtable-extend-Meson=skipPair+common
--_mtable-regex-Meson=skipPair/.//

--_mtable-extend-Meson=skipToArgEnd+skipPair

--_mtable-regex-Meson=configBody/\{//{tenter=configElt}
--_mtable-regex-Meson=configBody/\)//{tleave}{{
    pop
}}
--_mtable-extend-Meson=configBody+common

--_mtable-regex-Meson=configElt/'([^']+)'[ \t\n]*:/\1/C/{tenter=configValue}{{
    count 1 ge {
       dup . exch scope:
    } if
}}
--_mtable-regex-Meson=configElt/\}//{tleave}
--_mtable-extend-Meson=configElt+common

--_mtable-regex-Meson=configValue/,//{tjump=configElt}
--_mtable-regex-Meson=configValue/\}//{_advanceTo=0start}{tleave}
--_mtable-extend-Meson=configValue+skipToArgEnd

--_mtable-regex-Meson=main/([a-zA-Z_][a-zA-Z_0-9]*)[ \t\n]*=([^=]|$)/\1/V/{_advanceTo=2start}{{
   /lastvar . def
}}
--_mtable-regex-Meson=main/project[ \t\n]*\([ \t\n]*'([^']*[^\\])'[ \t\n]*/\1/P/{tenter=skipToArgEnd}
--_mtable-regex-Meson=main/subdir[ \t\n]*\([ \t\n]*'([^']*[^\\])'[ \t\n]*/\1/S/{tenter=skipToArgEnd}
--_mtable-regex-Meson=main/test[ \t\n]*\([ \t\n]*'([^']*[^\\])'[ \t\n]*/\1/t/{tenter=skipToArgEnd}
--_mtable-extend-Meson=main+common
--_mtable-regex-Meson=main/.//
